// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockvideo

import (
	context "context"

	model "github.com/dailoi280702/vrs-general-service/type/model"
	mock "github.com/stretchr/testify/mock"

	specification "github.com/dailoi280702/vrs-general-service/repository/specification"
)

// MockI is an autogenerated mock type for the I type
type MockI struct {
	mock.Mock
}

type MockI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockI) EXPECT() *MockI_Expecter {
	return &MockI_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, spec
func (_m *MockI) Find(ctx context.Context, spec specification.I) ([]model.Video, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) ([]model.Video, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) []model.Video); ok {
		r0 = rf(ctx, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, specification.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockI_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockI_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specification.I
func (_e *MockI_Expecter) Find(ctx interface{}, spec interface{}) *MockI_Find_Call {
	return &MockI_Find_Call{Call: _e.mock.On("Find", ctx, spec)}
}

func (_c *MockI_Find_Call) Run(run func(ctx context.Context, spec specification.I)) *MockI_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specification.I))
	})
	return _c
}

func (_c *MockI_Find_Call) Return(_a0 []model.Video, _a1 error) *MockI_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockI_Find_Call) RunAndReturn(run func(context.Context, specification.I) ([]model.Video, error)) *MockI_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, spec
func (_m *MockI) Get(ctx context.Context, spec specification.I) (model.Video, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) (model.Video, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) model.Video); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(model.Video)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specification.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specification.I
func (_e *MockI_Expecter) Get(ctx interface{}, spec interface{}) *MockI_Get_Call {
	return &MockI_Get_Call{Call: _e.mock.On("Get", ctx, spec)}
}

func (_c *MockI_Get_Call) Run(run func(ctx context.Context, spec specification.I)) *MockI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specification.I))
	})
	return _c
}

func (_c *MockI_Get_Call) Return(_a0 model.Video, _a1 error) *MockI_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockI_Get_Call) RunAndReturn(run func(context.Context, specification.I) (model.Video, error)) *MockI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *MockI) Update(ctx context.Context, data model.Video) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Video) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockI_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockI_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.Video
func (_e *MockI_Expecter) Update(ctx interface{}, data interface{}) *MockI_Update_Call {
	return &MockI_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *MockI_Update_Call) Run(run func(ctx context.Context, data model.Video)) *MockI_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Video))
	})
	return _c
}

func (_c *MockI_Update_Call) Return(_a0 error) *MockI_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockI_Update_Call) RunAndReturn(run func(context.Context, model.Video) error) *MockI_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockI creates a new instance of MockI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockI {
	mock := &MockI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
