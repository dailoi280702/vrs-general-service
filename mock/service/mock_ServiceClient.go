// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockservice

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/dailoi280702/vrs-general-service/proto"
)

// MockServiceClient is an autogenerated mock type for the ServiceClient type
type MockServiceClient struct {
	mock.Mock
}

type MockServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceClient) EXPECT() *MockServiceClient_Expecter {
	return &MockServiceClient_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) GetUserByID(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption) (*proto.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *proto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) *proto.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockServiceClient_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.IdRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetUserByID(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetUserByID_Call {
	return &MockServiceClient_GetUserByID_Call{Call: _e.mock.On("GetUserByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetUserByID_Call) Run(run func(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption)) *MockServiceClient_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.IdRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_GetUserByID_Call) Return(_a0 *proto.User, _a1 error) *MockServiceClient_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_GetUserByID_Call) RunAndReturn(run func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.User, error)) *MockServiceClient_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWatchedHistory provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) GetUserWatchedHistory(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption) (*proto.Videos, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWatchedHistory")
	}

	var r0 *proto.Videos
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.Videos, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) *proto.Videos); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Videos)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_GetUserWatchedHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWatchedHistory'
type MockServiceClient_GetUserWatchedHistory_Call struct {
	*mock.Call
}

// GetUserWatchedHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.IdRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetUserWatchedHistory(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetUserWatchedHistory_Call {
	return &MockServiceClient_GetUserWatchedHistory_Call{Call: _e.mock.On("GetUserWatchedHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetUserWatchedHistory_Call) Run(run func(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption)) *MockServiceClient_GetUserWatchedHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.IdRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_GetUserWatchedHistory_Call) Return(_a0 *proto.Videos, _a1 error) *MockServiceClient_GetUserWatchedHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_GetUserWatchedHistory_Call) RunAndReturn(run func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.Videos, error)) *MockServiceClient_GetUserWatchedHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoByID provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) GetVideoByID(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption) (*proto.Video, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoByID")
	}

	var r0 *proto.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.Video, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) *proto.Video); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.IdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_GetVideoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoByID'
type MockServiceClient_GetVideoByID_Call struct {
	*mock.Call
}

// GetVideoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.IdRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetVideoByID(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetVideoByID_Call {
	return &MockServiceClient_GetVideoByID_Call{Call: _e.mock.On("GetVideoByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetVideoByID_Call) Run(run func(ctx context.Context, in *proto.IdRequest, opts ...grpc.CallOption)) *MockServiceClient_GetVideoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.IdRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_GetVideoByID_Call) Return(_a0 *proto.Video, _a1 error) *MockServiceClient_GetVideoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_GetVideoByID_Call) RunAndReturn(run func(context.Context, *proto.IdRequest, ...grpc.CallOption) (*proto.Video, error)) *MockServiceClient_GetVideoByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideosByIds provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) GetVideosByIds(ctx context.Context, in *proto.GetVideosByIdsRequest, opts ...grpc.CallOption) (*proto.Videos, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVideosByIds")
	}

	var r0 *proto.Videos
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetVideosByIdsRequest, ...grpc.CallOption) (*proto.Videos, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetVideosByIdsRequest, ...grpc.CallOption) *proto.Videos); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Videos)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetVideosByIdsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_GetVideosByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideosByIds'
type MockServiceClient_GetVideosByIds_Call struct {
	*mock.Call
}

// GetVideosByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetVideosByIdsRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetVideosByIds(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetVideosByIds_Call {
	return &MockServiceClient_GetVideosByIds_Call{Call: _e.mock.On("GetVideosByIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetVideosByIds_Call) Run(run func(ctx context.Context, in *proto.GetVideosByIdsRequest, opts ...grpc.CallOption)) *MockServiceClient_GetVideosByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetVideosByIdsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_GetVideosByIds_Call) Return(_a0 *proto.Videos, _a1 error) *MockServiceClient_GetVideosByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_GetVideosByIds_Call) RunAndReturn(run func(context.Context, *proto.GetVideosByIdsRequest, ...grpc.CallOption) (*proto.Videos, error)) *MockServiceClient_GetVideosByIds_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *proto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) (*proto.LoginResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) *proto.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LoginRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Login_Call {
	return &MockServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Login_Call) Run(run func(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption)) *MockServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LoginRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_Login_Call) Return(_a0 *proto.LoginResponse, _a1 error) *MockServiceClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_Login_Call) RunAndReturn(run func(context.Context, *proto.LoginRequest, ...grpc.CallOption) (*proto.LoginResponse, error)) *MockServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *proto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) (*proto.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) *proto.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockServiceClient_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RegisterRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Register(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Register_Call {
	return &MockServiceClient_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Register_Call) Run(run func(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption)) *MockServiceClient_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.RegisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_Register_Call) Return(_a0 *proto.User, _a1 error) *MockServiceClient_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_Register_Call) RunAndReturn(run func(context.Context, *proto.RegisterRequest, ...grpc.CallOption) (*proto.User, error)) *MockServiceClient_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVideo provides a mock function with given fields: ctx, in, opts
func (_m *MockServiceClient) UpdateVideo(ctx context.Context, in *proto.Video, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideo")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Video, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Video, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Video, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceClient_UpdateVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVideo'
type MockServiceClient_UpdateVideo_Call struct {
	*mock.Call
}

// UpdateVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Video
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) UpdateVideo(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_UpdateVideo_Call {
	return &MockServiceClient_UpdateVideo_Call{Call: _e.mock.On("UpdateVideo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_UpdateVideo_Call) Run(run func(ctx context.Context, in *proto.Video, opts ...grpc.CallOption)) *MockServiceClient_UpdateVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Video), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceClient_UpdateVideo_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockServiceClient_UpdateVideo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceClient_UpdateVideo_Call) RunAndReturn(run func(context.Context, *proto.Video, ...grpc.CallOption) (*emptypb.Empty, error)) *MockServiceClient_UpdateVideo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceClient creates a new instance of MockServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceClient {
	mock := &MockServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
