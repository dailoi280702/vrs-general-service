// Code generated by mockery v2.53.3. DO NOT EDIT.

package mockuser

import (
	context "context"

	model "github.com/dailoi280702/vrs-general-service/type/model"
	mock "github.com/stretchr/testify/mock"

	specification "github.com/dailoi280702/vrs-general-service/repository/specification"
)

// MockI is an autogenerated mock type for the I type
type MockI struct {
	mock.Mock
}

type MockI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockI) EXPECT() *MockI_Expecter {
	return &MockI_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, spec
func (_m *MockI) Count(ctx context.Context, spec specification.I) (int64, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) (int64, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) int64); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specification.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockI_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockI_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specification.I
func (_e *MockI_Expecter) Count(ctx interface{}, spec interface{}) *MockI_Count_Call {
	return &MockI_Count_Call{Call: _e.mock.On("Count", ctx, spec)}
}

func (_c *MockI_Count_Call) Run(run func(ctx context.Context, spec specification.I)) *MockI_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specification.I))
	})
	return _c
}

func (_c *MockI_Count_Call) Return(_a0 int64, _a1 error) *MockI_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockI_Count_Call) RunAndReturn(run func(context.Context, specification.I) (int64, error)) *MockI_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockI) Create(ctx context.Context, data model.User) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockI_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockI_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.User
func (_e *MockI_Expecter) Create(ctx interface{}, data interface{}) *MockI_Create_Call {
	return &MockI_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockI_Create_Call) Run(run func(ctx context.Context, data model.User)) *MockI_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *MockI_Create_Call) Return(_a0 error) *MockI_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockI_Create_Call) RunAndReturn(run func(context.Context, model.User) error) *MockI_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, spec
func (_m *MockI) Get(ctx context.Context, spec specification.I) (model.User, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) (model.User, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specification.I) model.User); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specification.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specification.I
func (_e *MockI_Expecter) Get(ctx interface{}, spec interface{}) *MockI_Get_Call {
	return &MockI_Get_Call{Call: _e.mock.On("Get", ctx, spec)}
}

func (_c *MockI_Get_Call) Run(run func(ctx context.Context, spec specification.I)) *MockI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specification.I))
	})
	return _c
}

func (_c *MockI_Get_Call) Return(_a0 model.User, _a1 error) *MockI_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockI_Get_Call) RunAndReturn(run func(context.Context, specification.I) (model.User, error)) *MockI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockI creates a new instance of MockI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockI {
	mock := &MockI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
